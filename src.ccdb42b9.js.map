{"version":3,"sources":["js/timer.js","index.js"],"names":["refs","selector","document","getElementById","days","hours","mins","secs","startBtn","stopBtn","CountdownTimer","constructor","targetDate","intervalIsActive","start","intervalId","setInterval","currentTime","Date","now","updateTimer","timeComponents","stop","clearInterval","textContent","time","pad","Math","floor","value","String","padStart","timerPlugin","addEventListener"],"mappings":";AAAA,MAAMA,EAAO,CACTC,SAAUC,SAASC,eAAe,aAClCC,KAAMF,SAASC,eAAe,QAC9BE,MAAOH,SAASC,eAAe,SAC/BG,KAAMJ,SAASC,eAAe,QAC9BI,KAAML,SAASC,eAAe,QAC9BK,SAAUN,SAASC,eAAe,YAClCM,QAASP,SAASC,eAAe,YAGrC,MAAMO,EACFC,aAAY,SAAEV,EAAF,WAAYW,IACfC,KAAAA,kBAAmB,EACnBD,KAAAA,WAAaA,EACbX,KAAAA,SAAWA,EAIpBa,QAESC,KAAAA,WAAaC,YAAY,KACpBC,MAAAA,EAAcC,KAAKC,MAIzBC,EAFaC,EADI,KAAKT,WAAaK,KAIpC,KAGPK,OACIC,cAAc,KAAKR,YACdF,KAAAA,kBAAmB,GAKhC,SAASO,GAAY,KAAEhB,EAAF,MAAQC,EAAR,KAAeC,EAAf,KAAqBC,IACtCP,EAAKI,KAAKoB,eAAiBpB,IAC3BJ,EAAKK,MAAMmB,eAAiBnB,IAC5BL,EAAKM,KAAKkB,eAAiBlB,IAC3BN,EAAKO,KAAKiB,eAAiBjB,IAG/B,SAASc,EAAeI,GAMb,MAAA,CAAErB,KALIsB,EAAIC,KAAKC,MAAMH,EAAQ,QAKrBpB,MAJDqB,EAAIC,KAAKC,MAAOH,EAAQ,MAAyB,OAIzCnB,KAHToB,EAAIC,KAAKC,MAAOH,EAAQ,KAAoB,MAG7BlB,KAFfmB,EAAIC,KAAKC,MAAOH,EAAQ,IAAc,OAKvD,SAASC,EAAIG,GACFC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,KAIrC,MAAMC,EAAc,IAAItB,EAAe,CACnCT,SAAU,WACVW,WAAY,IAAIM,KAAK,kBAGzBlB,EAAKS,QAAQwB,iBAAiB,QAAS,KACnCD,EAAYV,SAGhBtB,EAAKQ,SAASyB,iBAAiB,QAAS,KACpCD,EAAYlB;;ACnEhB,aAAA,QAAA","file":"src.ccdb42b9.js","sourceRoot":"../src","sourcesContent":["const refs = {\n    selector: document.getElementById('timer - 1'),\n    days: document.getElementById('days'),\n    hours: document.getElementById('hours'),\n    mins: document.getElementById('mins'),\n    secs: document.getElementById('secs'),\n    startBtn: document.getElementById('startBtn'),\n    stopBtn: document.getElementById('stopBtn'),\n};\n\nclass CountdownTimer {\n    constructor({ selector, targetDate }) {\n        this.intervalIsActive = false;\n        this.targetDate = targetDate;\n        this.selector = selector;\n        // this.start();\n    }\n\n    start() {\n\n        this.intervalId = setInterval(() => {\n            const currentTime = Date.now();\n            const timeDiff = this.targetDate - currentTime;\n            const time = timeComponents(timeDiff);\n\n            updateTimer(time);\n        }, 1000);\n    }\n\n    stop() {\n        clearInterval(this.intervalId);\n        this.intervalIsActive = false;\n    }\n\n};\n\nfunction updateTimer({ days, hours, mins, secs }) {\n    refs.days.textContent = `${days}`;\n    refs.hours.textContent = `${hours}`;\n    refs.mins.textContent = `${mins}`;\n    refs.secs.textContent = `${secs}`;\n};\n\nfunction timeComponents(time) {\n    const days = pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n    const hours = pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n    const mins = pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n    const secs = pad(Math.floor((time % (1000 * 60)) / 1000));\n\n    return { days, hours, mins, secs };\n};\n\nfunction pad(value) {\n    return String(value).padStart(2, '0');\n};\n\n\nconst timerPlugin = new CountdownTimer({\n    selector: '#timer-1',\n    targetDate: new Date('Nov 17, 2021'),\n});\n\nrefs.stopBtn.addEventListener('click', () => {\n    timerPlugin.stop();\n});\n\nrefs.startBtn.addEventListener('click', () => {\n    timerPlugin.start();\n});\n\n\n// new CountdownTimer({\n//     selector: '#timer-1',\n//     targetDate: new Date('Nov 17, 2021'),\n// });\n\n\n// class CountdownTimer {\n//     constructor({ onTick, targetDate }) {\n//         this.intervalId = null;\n//         this.intervalIsActive = false;\n//         this.onTick = onTick;\n//         this.targetDate = targetDate;\n//     }\n\n//     start() {\n//         if (this.intervalIsActive) {\n//             return;\n//         }\n//         this.intervalIsActive = true;\n\n//         this.intervalId = setInterval(() => {\n//             const currentTime = Date.now();\n//             const timeDiff = this.targetDate - currentTime;\n//             const time = timeComponents(timeDiff);\n\n//             this.onTick(time);\n\n\n//         }, 1000);\n//     }\n\n//     stop() {\n//         clearInterval(this.intervalId);\n//         this.intervalIsActive = false;\n//     }\n// };\n\n// const timerPlugin = new CountdownTimer({\n//     onTick: updateTimer,\n// });\n\n\n// function updateTimer({ days, hours, mins, secs }) {\n//     refs.days.textContent = `${days}`;\n//     refs.hours.textContent = `${hours}`;\n//     refs.mins.textContent = `${mins}`;\n//     refs.secs.textContent = `${secs}`;\n// };\n\n\n// function timeComponents(time) {\n//     const days = pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n//     const hours = pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n//     const mins = pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n//     const secs = pad(Math.floor((time % (1000 * 60)) / 1000));\n\n//     return { days, hours, mins, secs };\n// };\n","import './js/timer';\n"]}